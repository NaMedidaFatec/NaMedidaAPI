{
    "sourceFile": "namedida-api-general/src/main/java/br/com/namedida/core/service/security/AuthenticationService.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1732681923852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1732681923852,
            "name": "Commit-0",
            "content": "package br.com.namedida.core.service.security;\n\nimport br.com.namedida.core.persistence.UsuarioDepartamentoRepository;\nimport br.com.namedida.core.persistence.UsuarioUnidadeEnsinoRepository;\nimport br.com.namedida.core.service.security.bean.StakeholdersBean;\nimport br.com.namedida.core.service.security.util.JwtTokenUtil;\nimport br.com.namedida.core.validator.CidadeValidator;\nimport br.com.namedida.core.validator.UnidadeEnsinoValidator;\nimport br.com.namedida.domain.*;\nimport br.com.namedida.domain.enums.TipoUsuario;\nimport br.com.namedida.domain.form.AuthenticationForm;\nimport br.com.namedida.domain.form.EnderecoForm;\nimport br.com.namedida.domain.form.TelefoneForm;\nimport br.com.namedida.domain.security.PasswordUtil;\nimport br.com.namedida.domain.security.UserAuthenticated;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\n\n@Service\n@RequiredArgsConstructor\npublic class AuthenticationService {\n    private final JwtTokenUtil tokenUtil;\n    private final UsuarioDepartamentoRepository usuarioDepartamentoRepository;\n    private final UsuarioUnidadeEnsinoRepository  usuarioUnidadeEnsinoRepository;\n    private final StakeholdersBean stakeholdersBean;\n\n\n    public String authenticate(AuthenticationForm authenticationForm) {\n        UserAuthenticated userDetail = null;\n        if (authenticationForm.getTipoUsuario().equals(TipoUsuario.DEPARTAMENTO)) {\n            userDetail = usuarioDepartamentoRepository.findByEmail(authenticationForm.getEmail())\n                    .map(UserAuthenticated::new)\n                    .orElseThrow(\n                            () -> new UsernameNotFoundException(\"Usuário do departamento não encontrado com o e-mail: \" + authenticationForm.getEmail()));\n        } else {\n            userDetail = usuarioUnidadeEnsinoRepository.findByEmail(authenticationForm.getEmail())\n                    .map(UserAuthenticated::new)\n                    .orElseThrow(\n                            () -> new UsernameNotFoundException(\"Usuário da instituição de ensino não encontrado com o e-mail: \" + authenticationForm.getEmail()));\n        }\n\n        if (!PasswordUtil.verify(authenticationForm.getPassword(), userDetail.getUser().getPassword())) {\n            throw new UsernameNotFoundException(\"Senha inválida\");\n        }\n\n        if (!userDetail.getUser().getEnabled()) {\n            throw new UsernameNotFoundException(\"Usuário inativo\");\n        }\n\n        if (userDetail.getUserUnidadeEnsino() != null) {\n            if (!userDetail.getUserUnidadeEnsino().getUnidadeEnsino().getEnabled()) {\n                throw new UsernameNotFoundException(\"Escola inativa\");\n            }\n        }\n\n        return tokenUtil.generateJwtToken(userDetail);\n    }\n\n    public Usuario signup(AuthenticationForm form) throws Exception {\n        EnderecoForm enderecoForm = form.getEnderecoForm();\n        Endereco endereco = Endereco.enderecoBuilder()\n                .numero(enderecoForm.getNumero())\n                .logradouro(enderecoForm.getLogradouro())\n                .complemento(enderecoForm.getComplemento())\n                .bairro(enderecoForm.getBairro())\n                .cep(enderecoForm.getCep())\n                .cidade(CidadeValidator.validate(enderecoForm.getCidade()))\n                .build();\n\n        TelefoneForm telefoneForm = form.getTelefoneForm();\n        Telefone telefone = Telefone.telefoneBuilder()\n                .numero(telefoneForm.getNumero())\n                .ddd(telefoneForm.getDdd())\n                .build();\n\n        if (form.getTipoUsuario().equals(TipoUsuario.DEPARTAMENTO) ) {\n            UsuarioDepartamento usuarioDepartamento = UsuarioDepartamento.usuarioDepartamentoBuilder()\n                            .nome(form.getNome())\n                            .cpf(form.getCpf())\n                            .dataNascimento(form.getDataNascimento())\n                            .email(form.getEmail())\n                            .username(form.getUsername())\n                            .password(form.getPasswordEncrypted())\n                            .cargo(form.getCargo())\n                            .registro(form.getRegistro())\n                            .endereco(endereco)\n                            .telefone(telefone)\n                            .build();\n\n            if (usuarioDepartamentoRepository.findByEmail(usuarioDepartamento.getEmail()).isPresent()) {\n                throw new Error(\"Já existe um usuário com esse e-mail cadastrado\");\n            }\n\n            usuarioDepartamento = usuarioDepartamentoRepository.save(usuarioDepartamento);\n            return usuarioDepartamento;\n        }\n\n        UsuarioUnidadeEnsino usuarioUnidadeEnsino = UsuarioUnidadeEnsino.usuarioUnidadeEnsino()\n                        .nome(form.getNome())\n                        .cpf(form.getCpf())\n                        .dataNascimento(form.getDataNascimento())\n                        .unidadeEnsino(UnidadeEnsinoValidator.validate(form.getUnidadeEnsino()))\n                        .email(form.getEmail())\n                        .username(form.getUsername())\n                        .password(form.getPasswordEncrypted())\n                        .setor(form.getSetor())\n                        .cargo(form.getCargo())\n                        .registro(form.getRegistro())\n                        .telefone(telefone)\n                        .endereco(endereco)\n                        .build();\n\n        if (usuarioUnidadeEnsinoRepository.findByEmail(usuarioUnidadeEnsino.getEmail()).isPresent()) {\n            throw new Error(\"Já existe um usuário com esse e-mail cadastrado\");\n        }\n\n        usuarioUnidadeEnsino = usuarioUnidadeEnsinoRepository.save(usuarioUnidadeEnsino);\n        return usuarioUnidadeEnsino;\n    }\n}\n"
        }
    ]
}